version: 0.2

env:
  variables:
    AWS_ACCOUNT_ID: "061051254585"
    AWS_DEFAULT_REGION: "us-east-1"
    CLUSTER_NAME: "health-sync"
    NAMESPACE: "medi-track"
    MEDI_TRACK_ECR_REPOSITORY: "medi-track-gateway"
    MEDI_TRACK_DEPLOYMENT_NAME: "medi-track-gateway"
    PATIENT_RECORD_ECR_REPOSITORY: "patient-record-service"
    PATIENT_RECORD_DEPLOYMENT_NAME: "patient-record"
    APPOINTMENTS_ECR_REPOSITORY: "appointment-scheduling"
    APPOINTMENTS_DEPLOYMENT_NAME: "appointment-scheduling"
    NOTIFICATION_ECR_REPOSITORY: "notification"
    NOTIFICATION_DEPLOYMENT_NAME: "notification-service"
    FILE_HANDLER_ECR_REPOSITORY: "file-handler"
    FILE_HANDLER_DEPLOYMENT_NAME: "file-handler"
    CRON_JOBS_ECR_REPOSITORY: "medi-track-cron-jobs"
    CRON_JOBS_APPOINTMENT_RECORD_DEPLOYMENT_NAME: "appointment-records-job"
    CRON_JOBS_DOCTOR_RECORD_DEPLOYMENT_NAME: "appointments-per-doctor-job"
    CRON_JOBS_DISEASE_SUMMARY_DEPLOYMENT_NAME: "disease-summary-job"
  parameter-store:
    ACTIVE_ENV: "ACTIVE_ENV"
    DB_HOST: "DB_HOST"
    DB_NAME: "DB_NAME"
    DB_PASSWORD: "DB_PASSWORD"
    DB_PORT: "DB_PORT"
    DB_USER: "DB_USER"
    APPOINTMENTS_HOST: "APPOINTMENTS_HOST"
    NOTIFICATIONS_HOST: "NOTIFICATIONS_HOST"
    PATIENT_RECORD_HOST: "PATIENT_RECORD_HOST"
    UPLOADER_HOST: "UPLOADER_HOST"
phases:
  install:
    runtime-versions:
      nodejs: 16
  pre_build:
    commands: 
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION  | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com
      # Install kubectl 
      - echo "Installing kubectl..."
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/
      - mkdir -p ~/.kube
      # Authenticate kubectl with EKS cluster
      - echo "Authenticating kubectl with EKS cluster..."
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION  --name $CLUSTER_NAME
      - export IMAGE_TAG=$(date +%Y%m%d%H%M%S)
      - chmod +x scripts/run-tests.sh
      - chmod +x scripts/integration-test.sh


      # - echo "target env : $TARGET_ENV " 

  build:
    commands:
      # - DB_HOST=$DB_HOST DB_NAME=$DB_NAME DB_PASSWORD=$DB_PASSWORD DB_PORT=$DB_PORT DB_USER=$DB_USER npm run test -- --config=jest-e2e.json

      # - docker build -t $MEDI_TRACK_ECR_REPOSITORY:$IMAGE_TAG -f ./medi-track-2417924-20240485/Dockerfile ./medi-track-2417924-20240485
      # - docker tag $MEDI_TRACK_ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$MEDI_TRACK_ECR_REPOSITORY:$IMAGE_TAG

      # - docker build -t $PATIENT_RECORD_ECR_REPOSITORY:$IMAGE_TAG -f ./patient-record-service/Dockerfile ./patient-record-service
      # - docker tag $PATIENT_RECORD_ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$PATIENT_RECORD_ECR_REPOSITORY:$IMAGE_TAG

      # - docker build -t $APPOINTMENTS_ECR_REPOSITORY:$IMAGE_TAG -f ./appointment-scheduling-service/Dockerfile ./appointment-scheduling-service
      # - docker tag $APPOINTMENTS_ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$APPOINTMENTS_ECR_REPOSITORY:$IMAGE_TAG

      # - docker build -t $NOTIFICATION_ECR_REPOSITORY:$IMAGE_TAG -f ./notification-service/Dockerfile ./notification-service
      # - docker tag $NOTIFICATION_ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$NOTIFICATION_ECR_REPOSITORY:$IMAGE_TAG

      # - docker build -t $FILE_HANDLER_ECR_REPOSITORY:$IMAGE_TAG -f ./file-handler/Dockerfile ./file-handler
      # - docker tag $FILE_HANDLER_ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$FILE_HANDLER_ECR_REPOSITORY:$IMAGE_TAG
     
      # - docker build -t $CRON_JOBS_ECR_REPOSITORY:$IMAGE_TAG -f ./cron-jobs/Dockerfile ./cron-jobs
      # - docker tag $CRON_JOBS_ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$CRON_JOBS_ECR_REPOSITORY:$IMAGE_TAG

  post_build: 
    commands:
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$MEDI_TRACK_ECR_REPOSITORY:$IMAGE_TAG
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$APPOINTMENTS_ECR_REPOSITORY:$IMAGE_TAG
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$PATIENT_RECORD_ECR_REPOSITORY:$IMAGE_TAG
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$FILE_HANDLER_ECR_REPOSITORY:$IMAGE_TAG
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$NOTIFICATION_ECR_REPOSITORY:$IMAGE_TAG
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$CRON_JOBS_ECR_REPOSITORY:$IMAGE_TAG

    
      # - kubectl set image deployment/$MEDI_TRACK_DEPLOYMENT_NAME-blue $MEDI_TRACK_ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$MEDI_TRACK_ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE-blue
      # - kubectl apply -f k8s/blue/medi-track-gateway-blue-deployment.yaml  -n $NAMESPACE-blue 
      # - kubectl set image deployment/$PATIENT_RECORD_DEPLOYMENT_NAME-blue $PATIENT_RECORD_ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$PATIENT_RECORD_ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE-blue
      # - kubectl apply -f k8s/blue/patient-record-blue-deployment.yaml  -n $NAMESPACE-blue

      # - docker run  -e  DB_HOST=$DB_HOST -e DB_NAME=$DB_NAME -e DB_PASSWORD=$DB_PASSWORD -e DB_PORT=$DB_PORT -e DB_USER=$DB_USER -e PATIENT_RECORD_HOST=patient-record-blue -e APPOINTMENTS_HOST=appointment-scheduling-blue -e NOTIFICATIONS_HOST=notification-service-blue -e UPLOADER_HOST=file-handler-blue --rm $MEDI_TRACK_ECR_REPOSITORY:$IMAGE_TAG npm run test:e2e
      # - kubectl set image deployment/$APPOINTMENTS_DEPLOYMENT_NAME-blue $APPOINTMENTS_ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$APPOINTMENTS_ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE-blue
      # - kubectl apply -f k8s/blue/appointment-scheduling-blue-deployment.yaml  -n $NAMESPACE-blue
      # - kubectl set image deployment/$NOTIFICATION_DEPLOYMENT_NAME-blue $NOTIFICATION_ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$NOTIFICATION_ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE-blue
      # - kubectl apply -f k8s/blue/notification-service-blue-deployment.yaml  -n $NAMESPACE-blue
      # - kubectl set image deployment/$FILE_HANDLER_DEPLOYMENT_NAME-blue $FILE_HANDLER_ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$FILE_HANDLER_ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE-blue
      # - kubectl apply -f k8s/blue/file-handler-blue-deployment.yaml  -n $NAMESPACE-blue

      # - kubectl set image cronjob/$CRON_JOBS_APPOINTMENT_RECORD_DEPLOYMENT_NAME-blue $CRON_JOBS_ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$CRON_JOBS_ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE-blue
      # - kubectl apply -f k8s/blue/appointment-records-cron-blue.yaml  -n $NAMESPACE-blue
      # - kubectl set image cronjob/$CRON_JOBS_DOCTOR_RECORD_DEPLOYMENT_NAME-blue $CRON_JOBS_ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$CRON_JOBS_ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE-blue
      # - kubectl apply -f k8s/blue/appointments-per-doctor-cron-blue.yaml  -n $NAMESPACE-blue
      # - kubectl set image cronjob/$CRON_JOBS_DISEASE_SUMMARY_DEPLOYMENT_NAME-blue $CRON_JOBS_ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$CRON_JOBS_ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE-blue
      # - kubectl apply -f k8s/blue/disease-summary-cron-blue.yaml -n $NAMESPACE-blue

      # - ./scripts/run-tests.sh green immediate $IMAGE_TAG
      # - ./scripts/run-tests.sh $ACTIVE_ENV immediate $IMAGE_TAG
      - ./scripts/integration-test.sh
      - |
        if [ $? -eq 0 ]; then
          echo "Integration tests passed, proceeding with deployment"
        else
          echo "Integration tests failed"
          exit 1
        fi



